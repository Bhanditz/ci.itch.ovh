
- job:
    name: itch
    node: gcs
    project-type: matrix
    execution-strategy:
      combination-filter: '!(JENKINS_XOS == "darwin" && JENKINS_ARCH == "386") && !(JENKINS_XOS == "true-windows" && JENKINS_ARCH == "amd64")'
    axes:
      - axis:
         type: label-expression
         name: JENKINS_XOS
         values: ['true-windows', 'darwin', 'linux']
      - axis:
         type: user-defined
         name: JENKINS_ARCH
         values:
           - 386
           - amd64
    parameters:
      - ..base-parameters:
    properties:
      - slack:
          notify:
            start: true
            success: true
            aborted: true
            failure: true
          show-commit-list: true
    wrappers:
      - ..base-wrappers:
      - workspace-cleanup:
          delete-dirs: true
      - credentials-binding:
          - text:
              credential-id: 85395ee8-f0b4-4adc-8100-aee9509ab159
              variable: COVERALLS_REPO_TOKEN
          - text:
              credential-id: 06e1f5e8-9ccc-4d33-9dcf-450565d79781
              variable: GITHUB_TOKEN
          - text:
              credential-id: 6af397da-f8a8-4e21-89c3-cef4616fb0bd
              variable: BINTRAY_TOKEN
    scm:
      - .git: &itch-git
          host: github.com
          repo: itchio/itch
          branches: '$JENKINS_TAG'
    publishers:
      - slack:
          build-server-url: https://ci.itch.ovh/
    builders:
      - shell: |
          echo > env.properties
          if [ "$JENKINS_XOS" = "true-windows" ]; then
            echo "JENKINS_OS=windows" >> env.properties
          else
            echo "JENKINS_OS=$JENKINS_XOS" >> env.properties
          fi
      - inject:
          properties-file: env.properties
      - shell: |
          node --version
          npm --version
          sassc --version
          go version
          if [ "$JENKINS_OS" = "linux" ]; then
            ruby --version
            gem --version
          fi
      - shell: |
          npm config set spin false
          npm install -g grunt-cli
          export PATH=$PATH:$PWD/node_modules/.bin
          npm install
          npm test
      - shell: |
          if [ "$JENKINS_OS-$JENKINS_ARCH" = "linux-amd64" ]; then
            export COVERALLS_SERVICE_NAME=jenkins
            export COVERALLS_SERVICE_JOB_ID=$BUILD_ID
            npm run coveralls
          fi
      - shell: |
          if [ "$JENKINS_DEPLOY" != "1" ]; then
            exit 0
          fi

          npm install -g babel-cli@6

          export GOPATH="$HOME/go"
          mkdir -p $GOPATH
          export PATH="$PATH:$GOPATH/bin"
          go get github.com/itchio/github-release
          export GITHUB_USER=itchio
          export GITHUB_REPO=itch

          export JENKINS_VERSION=$(echo $JENKINS_TAG | sed 's/^v//')

          UPLOADS=""

          if [ "$JENKINS_ARCH" = "386" ]; then
            ELECTRON_ARCH="ia32"
          else
            ELECTRON_ARCH="x64"
          fi

          BUILD_PATH="build/$JENKINS_TAG/itch-$JENKINS_OS-$ELECTRON_ARCH"

          release/prepare.sh

          TASKS="electron:$JENKINS_OS-$ELECTRON_ARCH"

          if [ "$JENKINS_OS" = "windows" ]; then
            export JENKINS_WINDOWS_INSTALLER_PATH="/c/jenkins/workspace/itch-installers"
            mkdir -p ${JENKINS_WINDOWS_INSTALLER_PATH}
            TASKS="$TASKS create-windows-installer:$ELECTRON_ARCH"
          fi

          grunt -v $TASKS

          if [ "$JENKINS_OS" = "windows" ]; then
            UPLOADS="$UPLOADS $(echo ${JENKINS_WINDOWS_INSTALLER_PATH}/itch-${JENKINS_VERSION}*.nupkg ${JENKINS_WINDOWS_INSTALLER_PATH}/*.exe ${JENKINS_WINDOWS_INSTALLER_PATH}/RELEASES)"
          fi

          if [ "$JENKINS_OS" = "darwin" ]; then
            OSX_SIGN_KEY="Developer ID Application: Amos Wenger (B2N6FSRTPV)"
            ditto -v $BUILD_PATH/itch.app itch.app

            codesign --deep --force --verbose --sign "$OSX_SIGN_KEY" itch.app
            codesign --verify -vvvv itch.app
            spctl -a -vvvv itch.app

            7za a itch-mac.zip itch.app

            npm install -g appdmg
            appdmg release/appdmg.json itch-mac.dmg

            UPLOADS="$UPLOADS itch-mac.zip itch-mac.dmg"
          fi

          if [ "$JENKINS_OS" = "linux" ]; then
            gem install dpl

            JENKINS_RELEASE_DATE="$(date +%Y-%m-%d)"
            FPM_VERSION=$JENKINS_VERSION
            if [ "$JENKINS_ARCH" = "386" ]; then
              FPM_ARCH="i386"
            else
              FPM_ARCH="x86_64"
            fi
            FPM_NAME="itch"
            FPM_DESCRIPTION="The best way to play itch.io games"
            FPM_URL="https://github.com/itchio/itch"
            FPM_MAINTAINER="Amos Wenger <amos@itch.io>"
            FPM_LICENSE="MIT"
            FPM_VENDOR="itch.io"
            FPM_CATEGORY="games"
            FPM_AFTER_INSTALL="$WORKSPACE/release/debian-after-install.sh"

            rm -rf stage2 && mkdir -p stage2/itch
            cp -rf $BUILD_PATH/* stage2/itch

            gem uninstall fpm -x
            gem install fpm-itchio

            DISTRO_FILES="itch=/opt \
              ../release/itch.sh=/usr/bin/itch \
              ../release/itch.desktop=/usr/share/applications/itch.desktop \
              ../release/icons/icon16.png=/usr/share/icons/hicolor/16x16/apps/itch.png \
              ../release/icons/icon32.png=/usr/share/icons/hicolor/32x32/apps/itch.png \
              ../release/icons/icon36.png=/usr/share/icons/hicolor/36x36/apps/itch.png \
              ../release/icons/icon48.png=/usr/share/icons/hicolor/48x48/apps/itch.png \
              ../release/icons/icon64.png=/usr/share/icons/hicolor/64x64/apps/itch.png \
              ../release/icons/icon72.png=/usr/share/icons/hicolor/72x72/apps/itch.png \
              ../release/icons/icon144.png=/usr/share/icons/hicolor/144x144/apps/itch.png \
              ../release/icons/icon512.png=/usr/share/icons/hicolor/512x512/apps/itch.png"

            fpm --force \
              -C stage2 -s dir -t deb \
              --deb-compression xz \
              --name "$FPM_NAME" \
              --description "$FPM_DESCRIPTION" \
              --url "$FPM_URL" \
              --version "$FPM_VERSION" \
              --maintainer "$FPM_MAINTAINER" \
              --architecture "$FPM_ARCH" \
              --license "$FPM_LICENSE" \
              --vendor "$FPM_VENDOR" \
              --category "$FPM_CATEGORY" \
              --after-install "$FPM_AFTER_INSTALL" \
              -d "p7zip-full (> 0)" \
              $DISTRO_FILES

            fpm --force \
              -C stage2 -s dir -t rpm \
              --rpm-compression xz \
              --name "$FPM_NAME" \
              --description "$FPM_DESCRIPTION" \
              --url "$FPM_URL" \
              --version "$FPM_VERSION" \
              --maintainer "$FPM_MAINTAINER" \
              --architecture "$FPM_ARCH" \
              --license "$FPM_LICENSE" \
              --vendor "$FPM_VENDOR" \
              --category "$FPM_CATEGORY" \
              --after-install "$FPM_AFTER_INSTALL" \
              -d "p7zip" \
              $DISTRO_FILES

            mv *.deb *.rpm build/

            UPLOADS="$UPLOADS $(echo build/*.deb build/*.rpm)"

            if [ "$JENKINS_ARCH" = "386" ]; then
              DEB_ARCH="i386"
            else
              DEB_ARCH="amd64"
            fi

            for repo in rpm deb; do
              echo "Uploading to $repo repo"
              rm -f bintray.json
              sed \
                -e "s/{{JENKINS_VERSION}}/${JENKINS_VERSION}/g" \
                -e "s/{{JENKINS_RELEASE_DATE}}/${JENKINS_RELEASE_DATE}/g" \
                -e "s/{{DEB_ARCH}}/${DEB_ARCH}/" \
                < release/bintray.${repo}.json \
                > bintray.json
              cat bintray.json
              set +x
              dpl --provider=bintray \
                --file=bintray.json \
                --user=fasterthanlime \
                --key="$BINTRAY_TOKEN"
              set -x
            done
          fi

          # Let lord GitHub not be 502'ing, and I will upload one more time - the Devops bible
          for f in $(echo $UPLOADS); do
            success=""
            for i in 1 2 3 4 5; do
              github-release upload \
                      --tag "$JENKINS_TAG" \
                      --name "$(basename $f)" \
                      --file "$f" \
                      --replace \
                      && success="yay"
              if [ "$success" = "yay" ]; then
                break
              else
                echo "Retrying upload of $f (try $i)"
                sleep 30
              fi
            done

            if [ "$success" != "yay" ]; then
              echo "Could not upload $f, despite our best efforts. Bailing out."
              exit 1
            fi
          done

- .commit-trigger:
    project: itch
    git: *itch-git

- .tag-trigger:
    project: itch
    git: *itch-git
    wrappers:
      - credentials-binding:
          - text:
              credential-id: 06e1f5e8-9ccc-4d33-9dcf-450565d79781
              variable: GITHUB_TOKEN
    post-builders:
      - inject:
          properties-file: version.prop
      - shell: |
          echo "Creating GitHub release for $JENKINS_TAG"

          export GOPATH="$HOME/go"
          mkdir -p $GOPATH
          export PATH="$PATH:$GOPATH/bin"
          go get github.com/aktau/github-release
          export GITHUB_USER=itchio
          export GITHUB_REPO=itch

          # fetch last-but-one tag - all tags are annotated
          # so we can use that to sort them by date
          OLD_TAG="$(git for-each-ref --sort=taggerdate --format '%(refname) %(taggerdate)' refs/tags | tail -2 | head -1 | cut -d ' ' -f 1 | cut -d '/' -f 3)"
          echo "Previous tag: $OLD_TAG"

          CHANGELOG="$(git log --oneline --no-merges $OLD_TAG..$JENKINS_TAG | cut -c 9- | sed 's/^/  * /')"
          echo "Changelog:\n\n$CHANGELOG\n\n"

          github-release delete \
            --tag "$JENKINS_TAG" || echo "Well that's fine!"

          github-release release \
            --tag "$JENKINS_TAG" \
            --draft \
            --pre-release \
            --description "$CHANGELOG"
