
- :export-latest-tag: |
    pattern = "[0-9][0-9]*.[0-9][0-9]*.[0-9][0-9]*"

    out = "git log --tags=$pattern --pretty=format:%d".execute().text
    versions = (out =~ pattern)
    latest = versions.collect().sort(false) { a, b ->
      [a, b]*.tokenize('.')*.collect { it as int }.with { u, v ->
        [u, v].transpose().findResult{ x, y -> x <=> y ?: null } ?: u.size() <=> v.size()
      }
    }[-1]

    props = "JENKINS_TAG = v$latest"

    latest_tag = new File('latest_tag.properties')
    revision = new File('revision.properties')

    if (latest_tag.exists() && latest_tag.text == props) {
      revision.text = "JENKINS_TAG = **"
    } else {
      revision.text = props
    }

    latest_tag.text = props

- :export-go-env: |
    env = [
      GOPATH: "$WORKSPACE/../../../..",
      GOARCH: "$arch",
      CGO_ENABLED: 1,
      CC_FOR_TARGET: "gcc",
      CXX_FOR_TARGET: "g++",
    ]

    if (JENKINS_TAG == "**") {
      env.JENKINS_VERSION = "head"
      env.JENKINS_DEPLOY = 0
    } else {
      env.JENKINS_VERSION = JENKINS_TAG
      env.JENKINS_DEPLOY = 1
    }
    env.JENKINS_LDFLAGS = /-X main.version=${env.JENKINS_VERSION}/

    switch (os) {
      case "windows":
        winBase = "C:\\msys64\\usr\\bin;C:\\msys64\\usr\\lib\\p7zip"

        switch (arch) {
          case "386":
            env.Path = "$Path;$winBase;C:\\msys64\\mingw32\\bin"
            break
          case "amd64":
            env.Path = "$Path;$winBase;C:\\msys64\\mingw64\\bin"
            break
        }
        break

      default:
        env.PATH = "$PATH:/usr/local/go/bin"
    }

    env.each { println it }

    return env
